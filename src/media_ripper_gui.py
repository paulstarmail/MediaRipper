# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import glob
import ffmpeg
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog

def browseHandler():
    dialog = QFileDialog()
    dialog.setFileMode(QFileDialog.FileMode())
    dir = dialog.getExistingDirectory(None)
    if dir[-1] == "/":
        dir = dir[:-1]
    dir = dir.replace("/","\\")
    return(dir)

class Ui_mainWindow(object):
    def setupUi(self, mainWindow):
        mainWindow.setObjectName("mainWindow")
        mainWindow.resize(286, 271)
        mainWindow.setMaximumSize(QtCore.QSize(286, 300))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icon-24.png"), QtGui.QIcon.Disabled, QtGui.QIcon.Off)
        mainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(mainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.ripButton = QtWidgets.QPushButton(self.centralwidget)
        self.ripButton.setGeometry(QtCore.QRect(10, 100, 100, 40))
        self.ripButton.setObjectName("ripButton")
        self.progress = QtWidgets.QLabel(self.centralwidget)
        self.progress.setGeometry(QtCore.QRect(10, 160, 261, 16))
        self.progress.setObjectName("progress")
        self.input = QtWidgets.QLabel(self.centralwidget)
        self.input.setGeometry(QtCore.QRect(10, 30, 61, 16))
        self.input.setObjectName("input")
        self.output = QtWidgets.QLabel(self.centralwidget)
        self.output.setGeometry(QtCore.QRect(10, 60, 71, 16))
        self.output.setObjectName("output")
        self.browseButton = QtWidgets.QPushButton(self.centralwidget)
        self.browseButton.setGeometry(QtCore.QRect(220, 30, 51, 23))
        self.browseButton.setObjectName("browseButton")
        self.browseButton_1 = QtWidgets.QPushButton(self.centralwidget)
        self.browseButton_1.setGeometry(QtCore.QRect(220, 60, 51, 23))
        self.browseButton_1.setObjectName("browseButton_1")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(80, 30, 131, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_1 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_1.setGeometry(QtCore.QRect(80, 60, 131, 20))
        self.lineEdit_1.setObjectName("lineEdit_1")
        self.credits = QtWidgets.QLabel(self.centralwidget)
        self.credits.setGeometry(QtCore.QRect(10, 190, 261, 61))
        self.credits.setAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignTop)
        self.credits.setWordWrap(True)
        self.credits.setObjectName("credits")
        self.exitButton = QtWidgets.QPushButton(self.centralwidget)
        self.exitButton.setGeometry(QtCore.QRect(170, 100, 100, 40))
        self.exitButton.setObjectName("exitButton")

        self.lineEdit.setAlignment(QtCore.Qt.AlignLeft)
        self.lineEdit.setText("<Browse>")
        self.lineEdit_1.setAlignment(QtCore.Qt.AlignLeft)
        self.lineEdit_1.setText("<Browse>")

        mainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(mainWindow)
        self.statusbar.setObjectName("statusbar")
        mainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(mainWindow)
        QtCore.QMetaObject.connectSlotsByName(mainWindow)

    def retranslateUi(self, mainWindow):
        _translate = QtCore.QCoreApplication.translate
        mainWindow.setWindowTitle(_translate("mainWindow", "Media Ripper"))
        self.ripButton.setText(_translate("mainWindow", "Rip"))
        self.progress.setText(_translate("mainWindow", ""))
        self.input.setText(_translate("mainWindow", "Drive to rip:"))
        self.output.setText(_translate("mainWindow", "Output folder:"))
        self.browseButton.setText(_translate("mainWindow", "Browse"))
        self.browseButton_1.setText(_translate("mainWindow", "Browse"))
        self.credits.setText(_translate("mainWindow", "This software was created by Amal K Paul using python and FFmpeg and is strictly for educational purposes only. Send your suggestions to \"paulstarmail@yahoo.com\"."))
        self.exitButton.setText(_translate("mainWindow", "Exit"))

        self.ripButton.clicked.connect(self.process)
        self.browseButton.clicked.connect(self.get_in_dir)
        self.browseButton_1.clicked.connect(self.get_out_dir)
        self.exitButton.clicked.connect(self.exit)

    def exit(self):
        os.sys.exit()

    def get_in_dir(self):
        in_dir = browseHandler()
        self.lineEdit.clear()
        self.lineEdit.setText(in_dir)
        print(self.lineEdit.text())

    def get_out_dir(self):
        out_dir = browseHandler()
        self.lineEdit_1.clear()
        self.lineEdit_1.setText(out_dir)
        print(self.lineEdit_1.text())

    def process(self):
        in_dir = self.lineEdit.text()
        out_dir = self.lineEdit_1.text()
        in_dir = in_dir.replace("\\","\\\\")
        out_dir = out_dir.replace("\\","\\\\")
        dirs_and_files = glob.glob(in_dir + "\\\\**\\\\*", recursive = True)
        file_list = []
        error = 0
        count = 0
        for item in dirs_and_files:
            if os.path.isfile(item):  
                file_list.append(item)        
        total = len(file_list)
        for in_file in file_list:
            count += 1
            self.progress.clear()
            self.progress.setText("Processing "+ str(count) + " of " + str(total) + " items")
            app.processEvents()
            print("\nCommencing " + in_file + " ripping...")
            try:
                input = ffmpeg.input(in_file)
                in_file = in_file.replace(in_dir, "")
                out_file = out_dir + in_file
                os.makedirs(os.path.dirname(out_file), exist_ok = True)
                ffmpeg.run(ffmpeg.output(input, out_file))
                print("done!")
            except:
                error += 1
                print("Error: Media might not be supported")
        if error == 0:
            self.progress.clear()
            self.progress.setText("Ripping completed successfully!")
            print("\nRipping completed successfully!")
        else:
            self.progress.clear()
            self.progress.setText("Ripping completed with " + str(error) + " error(s)")
            print("\nRipping completed with " + str(error) + " error(s)")

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    mainWindow = QtWidgets.QMainWindow()
    ui = Ui_mainWindow()
    ui.setupUi(mainWindow)
    mainWindow.show()
    sys.exit(app.exec_())
